int decrypt(char res)
{
  unsigned int i;
  unsigned int len;
  char mdp[29];

  mdp[17] = '\0';
  strcpy(mdp, "Q}|u`sfg~sf{}|a3");
  len = strlen(mdp);
  for ( i = 0; i < len; ++i )
    mdp[i] ^= res;
  if ( !strcmp(mdp, "Congratulations!") )
    return system("/bin/sh");
  else
    return puts("\nInvalid Password");
}

int test(int nb, int num)
{
  	int result;
	char random; 


  	switch (num - nb)
  	{
    	case 1:
			result = decrypt(num - nb);
      		break;
    	case 2:
			result = decrypt(num - nb);
      		break;
    	case 3:
			result = decrypt(num - nb);
      		break;
    	case 4:
			result = decrypt(num - nb);
      		break;
    	case 5:
			result = decrypt(num - nb);
      		break;
    	case 6:
			result = decrypt(num - nb);
      		break;
    	case 7:
			result = decrypt(num - nb);
      		break;
    	case 8:
			result = decrypt(num - nb);
      		break;
    	case 9:
			result = decrypt(num - nb);
      		break;
    	case 16:
			result = decrypt(num - nb);
      		break;
    	case 17:
			result = decrypt(num - nb);
      		break;
    	case 18:
			result = decrypt(num - nb);
      		break;
    	case 19:
			result = decrypt(num - nb);
      		break;
    	case 20:
			result = decrypt(num - nb);
      		break;
    	case 21:
      		result = decrypt(num - nb);
      		break;
    	default:
      		random = rand();
      		result = decrypt(random);
      		break;
  	}
  	return result;
}

int main(int argc, const char **argv, const char **envp)
{
  unsigned int random;
  int nb;

  random = time(0);
  srand(random);
  puts("***********************************");
  puts("*\t\tlevel03\t\t**");
  puts("***********************************");
  printf("Password:");
  scanf("%d", &nb);
  test(nb, 322424845);
  return 0;
}